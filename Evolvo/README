COMPILING FROM SOURCE

The recommended method of compiling Evolvo from source is using Jakarta Ant
(unless you're on Mac OS X - instructions for OS X build are below).  While
Ant is not mandatory to build Evolvo, it sure makes things a lot easier,
and I highly recommend it.  Ant can be found at:

http://jakarta.apache.org/ant/

COMPILING WITH ANT

If you do have Ant installed, it's as simple as:

ant -DDEBUG=off

in Evolvo's top level directory.  This will create the file:

dist/Evolvo-[date].jar

Where [date] is the current date, like:

dist/Evolvo-20020916.jar

To run evolvo from the jar file:

java -jar dist/Evolvo-[date].jar

COMPILING WITHOUT ANT

If you don't have Ant, and don't feel like installing it, you can still build
Evolvo without too much trouble.  From Evolvo's top level directory:

cd src
javac -d ../build *.java

This will build Evolvo and place it in the build directory.  To run it:

cd ../build
java evolvo

If you are a Java developer, and haven't used Ant before, I strongly recommend
that you check it out.  It could potentially make your life a whole lot easier.

COMPILING ON OS X

I've included a project file for Apple's Project Builder.  You can find it at:

Mac-OSX/evolvo/evolvo.pbproj

I highly recommend building Evolvo using this project file on OS X, as it 
takes advantage of a couple of Java for OS X's features.  

Please note that before this project, I have never used Project Builder,
so there may be a few glitches in the project file.  I think it's pretty clean
now, but if you have any troubles, please let me know.

RUNNING EVOLVO

Evolvo's interface is simple, though not necessarily self-explanatory.  When
you start Evolvo, you will be confronted with a set of 9 images.  Each of 
these images is created by generating a random set of mathematical expressions,
and evaluating those expressions over the area of the image.  Clicking the
"New Generation" button will create a new set of images.  If you like any
of the images, select it (by clicking on it) before clicking "New Generation."
The image you selected will be kept, and the remaining 8 images will be
drawn using the same expression, modified in random ways.  This new generation
can be said to be "children" of the selected image.  Once you find an image 
you really like, click the "Render Image" button to draw a full resolution
version of the image.

The Preferences panel (accessible from the File menu) gives fairly fine grained
control over how Evolvo works.  Some of these items have names that don't 
necessarily make sense, and some items would be better off in other parts of
the interface.  So, you can be pretty certain this dialog will change.  In the
meantime, here's a brief explanation.

SETTINGS TAB

Complexity - Evolvo represents the mathematical expressions that make up its
images in a tree structure internally.  When generating a new expression, 
Evolvo starts at the root, and works its way down.  The complexity setting
determines how likely it is that each branch of the tree will be a terminal
node (ie, a variable or scalar value) or not (the operators).  So, if 
Complexity=1.0, then the node has a 100% chance of being non-terminal.  If
Complexity=0.0, the node has 0% chance of being non-terminal.

Depreciation - To keep Evolvo from building infinitely large expression trees,
the value of Depreciation is subtracted from Complexity at each level of the
tree.  So, the further down the tree, the less likely Evolvo is to choose a
non-terminal for a node.  Evolvo won't let you set Depreciation to 0.0, but
it will allow you to set it to a very small value.  I wouldn't recommend doing
so, though.  Usually 0.20 - 0.25 is a good range.

Variable Probability - This is the likelihood that a terminal node will be a
variable rather than a scalar value.  1.0 means that all terminal nodes will
be variables, 0.0 means that no terminal nodes will be variables (and you will
get some very boring images this way).

The Variable Probabilities sections lists the available variables, and allows
you to assign a weight to each one.  The higher a variables weight, the more
likely it is to appear in an expression.  For the moment, r and theta are
calculated using the center of the image as the origin.

OPERATORS

This is a list of every possible operator, and associated weights.  The higher
an operator's weight, the more likely it is to appear in an expression.  Note
that, while a weight of 0.0 means the operator will never appear, a weight
of 1.0 does not necessarily guarantee that it will appear.

RENDER

This tab allows you to specify what resolution images generated with the 
"Render Image" button will be.  You can also choose between the RGB and HSV
color models here.  Note that the color model choice will effect the 
thumbnail images as well as the full resolution ones, but it will not take
effect until you create a new generation of images.

MUTATE

Evolvo uses several methods to change or mutate expressions.  This tab allows
you to control how likely each of these changes are to occur.

Change Probability - This controls the overall chance of a node in the 
expression tree being changed.  1.0 means all nodes will be changes, 0.0 means
no nodes will be changed.

New Expression - If this mutation method is chosen for a particular node, a new
expression tree is "grown."  This new tree's root then replaces the current
node.  This can have drastic affects on an image if it occurs near the root
of the expression tree, but may also be more subtle if it occurs further down
the tree.

Change Scalar Value - If the current node is a scalar node, then the value
of the scalar will be changed.  If it is not a scalar node, then nothing is
done.

Change to a Variable - The current node is replaced by a randomly chosen
variable.  This does honor the variable probability values in the Settings
tab.

Change to a Scalar - The current node is replaced by a randomly chosen scalar
value.

Change Functions - If the current node is non-terminal, a new operator is 
chosen to replace it.  If this new operator takes fewer arguments than the
old one, then the extra branches will be thrown out.  If the new operator
takes more arguments than the old one, new expression trees are generated
to fill them.  If the new operator takes the same number of arguments as the
old one, then nothing else is done.

Generate A New Argument - If the current node is non-terminal, then one of the
nodes arguments is chosen at random, and replaced with a new expression tree.
This is effectively the same as New Expression, except that it is done to one
of the node's children, instead of the node itself.

Become a Child Argument - If the current node is non-terminal, one of its
children is chosen at random.  This child replaces the current node.

Change Argument to Child Argument - If the current node is non-terminal, one 
of its grandchildren is chosen at random and replaces it.  This is basically
the same as Become a Child Argument, except that it reaches one step further
down the tree.

ADVANCED

The Advanced tab currently only contains the option to choose which exporter
plugin to use.  Evolvo comes packaged with two exporters (though they may
not be available on your system):

* Image IO Exporter - uses the new ImageIO interface in J2SE 1.4.  This is
  unavailable on J2SE 1.3.

* QuickTime Exporter - this uses Apple's QuickTime for Java API.  This is
  actually the recommended plugin, as it supports many more file formats
  then ImageIO, but it is not available on all systems.  Note that in order
  to take advantage of this plugin, you must have QuickTime Still Image 
  library installed as well as QuickTime for Java.

Evolvo also allows you to build your own exporter plugins.  This has not
yet been tested.  **MORE INFO SOON**

OTHER STUFF

Most of the operators available to Evolvo are fairly self-explanatory.  There
are a few that aren't, though, and I will try to explain them briefly.  Truth
be told, though, it's best just to play around and see the effects they each
have.

Invert - This takes one argument, and returns its reciprocal.

Atan2 - This is just the arctangent function, but instead of one argument, it
takes two, a and b.  The returned value is equivalent to atan(a/b).

Xor, And, Or, and Not - These perform bitwise operations on their arguments.

Mandel - Basically a Mandelbrot texture generator.

Ifs - This is a weird, mangled interpretation of an IFS fractal.  In reality,
it has very little to do with IFS fractals, but the algorithm it uses is based
on the IFS algorithm, so I have yet to rename it.

Beta - Returns the beta function of its two parameters:
           _     _
         \/a * \/b
         ---------
            _____
          \/a + b

Rint - Returns the closest integer value to its argument.

Remainder - Performs something similar to a floating point modulo function.

Mux5 and Mux3 - These are multiplexors, with Mux5 having 5 "inputs" and Mux3
having 3.  The multiplexors take, in addition to their inputs, another argument
whose value determines which of the inputs to return.  The returned value
is not altered in any way by the mux operators - simply chosen from a given
set.

If you have any other questions or comments about Evolvo, or if you would like
to work on developing it, please email me at andy@phota.to.  

Also, feel free to join the evolvo-interest mailing list by visiting:
http://lists.sourceforge.net/lists/listinfo/evolvo-interest

ACKNOWLEDGEMENTS

The whole idea behind Evolvo was inspired by Karl Simms' paper _Artificial
Evolution for Computer Graphics_, which can be found at:

http://www.genarts.com/karl/papers/siggraph91.html

The Evolvo installer is created using IzPack, and open source Java installer
system from Julien PONGE, which is available here:

http://www.izforge.com/izpack/



